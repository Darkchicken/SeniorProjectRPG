using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using PlayFab;
using PlayFab.ClientModels;

public class Runes : MonoBehaviour
{

    //Rune Type is "TRUE" for skills, "FALSE" for modifiers
    //Rune Skill Slot Numbers: Left Click = 5, Right Click = 6, 1 = 1, 2 = 2, 3 = 3, 4 = 4

    //Runes 1-6 reserved for base skills
    //Rune #1

    private int rune1_SkillSlot = 5; //Slot number of the skill
    private string rune1_Name = "Rune_Slam"; //Skill name and is also the name of the method
    private string rune1_Info = ""; //Skill information that will be shown when skill mouse over a skill
    private bool rune1_Type = true; //Rune Type is "TRUE" for skills, "FALSE" for modifiers
    private int rune1_ResourceGeneration = 6; //How much resource generated by the skill
    private int rune1_ResourceUsage = 0; //How much resource used to be able to use the skill
    private int rune1_AttackRange = 3; //The attack range of the skill
    private float rune1_AttackSpeed = 0.5f; //The attack speed of the skill
    private float rune1_AttackRadius = 0f; //The attack radius for area damages
    private int rune1_Value = 0; //x value for example x% increased damage or x sec freeze

    //Rune #2
    private int rune2_SkillSlot = 6;
    private string rune2_Name = "Rune_Carve";
    private string rune2_Info = "";
    private bool rune2_Type = true;
    private int rune2_ResourceGeneration = 0;
    private int rune2_ResourceUsage = 20;
    private int rune2_AttackRange = 0;
    private float rune2_AttackSpeed = 0.5f;
    private float rune2_AttackRadius = 5f;
    private int rune2_Value = 0;

    //Rune #7 - Increase damage for primary skill
    private int rune7_SkillSlot = 5;
    private string rune7_Name = "Rune_BloodyTouch";
    private string rune7_Info = "";
    private bool rune7_Type = false;
    private int rune7_ResourceGeneration = 0;
    private int rune7_ResourceUsage = 0;
    private int rune7_AttackRange = 0;
    private float rune7_AttackSpeed = 0f;
    private float rune7_AttackRadius = 0f;
    private int rune7_Value = 10;

    //Rune #8 - Increase critical hit chance for primary skill
    private int rune8_SkillSlot = 5;
    private string rune8_Name = "PRIMARY_INC_CRIT_HIT";
    private string rune8_Info = "";
    private bool rune8_Type = false;
    private int rune8_ResourceGeneration = 0;
    private int rune8_ResourceUsage = 0;
    private int rune8_AttackRange = 0;
    private float rune8_AttackSpeed = 0f;
    private float rune8_AttackRadius = 0f;
    private int rune8_Value = 3;

    //Rune #9 - Increase fury generated by primary skill
    private int rune9_SkillSlot = 5;
    private string rune9_Name = "PRIMARY_INC_FURY";
    private string rune9_Info = "";
    private bool rune9_Type = false;
    private int rune9_ResourceGeneration = 0;
    private int rune9_ResourceUsage = 0;
    private int rune9_AttackRange = 0;
    private float rune9_AttackSpeed = 0f;
    private float rune9_AttackRadius = 0f;
    private int rune9_Value = 9;

    //Rune #10 - Freeze hit enemies
    private int rune10_SkillSlot = 5;
    private string rune10_Name = "PRIMARY_FREEZE";
    private string rune10_Info = "";
    private bool rune10_Type = false;
    private int rune10_ResourceGeneration = 0;
    private int rune10_ResourceUsage = 0;
    private int rune10_AttackRange = 0;
    private float rune10_AttackSpeed = 0f;
    private float rune10_AttackRadius = 0f;
    private int rune10_Value = 1;

    public static NavMeshAgent controller;
    public static Animator playerAnimation;
    public static GameObject targetEnemy;
    public static Vector3 position;
    public float stopDistanceForAttack = 2f;

    private static float attackTimer = 0f;
    private PlayerCombatManager playerCombatManager;


    void Start()
    {
        //playerAnimation = GetComponent<Animator>();
        /*
        runes = new List<Rune>();
        runes.Add(new Rune(rune1_SkillSlot, rune1_Name, rune1_Info, rune1_Type, rune1_ResourceGeneration, rune1_ResourceUsage, rune1_AttackRange, rune1_AttackSpeed, rune1_Value));
        runes.Add(new Rune(rune2_SkillSlot, rune2_Name, rune2_Info, rune2_Type, rune2_ResourceGeneration, rune2_ResourceUsage, rune2_AttackRange, rune2_AttackSpeed, rune2_Value));
        runes.Add(new Rune(rune7_SkillSlot, rune7_Name, rune7_Info, rune7_Type, rune7_ResourceGeneration, rune7_ResourceUsage, rune7_AttackRange, rune7_AttackSpeed, rune7_Value));
        runes.Add(new Rune(rune8_SkillSlot, rune8_Name, rune8_Info, rune8_Type, rune8_ResourceGeneration, rune8_ResourceUsage, rune8_AttackRange, rune8_AttackSpeed, rune8_Value));
        runes.Add(new Rune(rune9_SkillSlot, rune9_Name, rune9_Info, rune9_Type, rune9_ResourceGeneration, rune9_ResourceUsage, rune9_AttackRange, rune9_AttackSpeed, rune9_Value));
        runes.Add(new Rune(rune10_SkillSlot, rune10_Name, rune10_Info, rune10_Type, rune10_ResourceGeneration, rune10_ResourceUsage, rune10_AttackRange, rune10_AttackSpeed, rune10_Value));
        */
        controller = GetComponent<NavMeshAgent>();
        GameManager.players.Add(gameObject);
        position = transform.position;
        playerAnimation = GetComponent<Animator>();

    }

    void Update()
    {
        attackTimer += Time.deltaTime;
    }

    int GetPlayerResource()
    {
        Debug.Log(PlayFabDataStore.playerCurrentResource);
        return PlayFabDataStore.playerCurrentResource;
    }

    void SetPlayerResource(int generate)
    {
        PlayFabDataStore.playerCurrentResource += generate;
    }

    public void Rune_Slam()
    {
        string runeId = "Rune_Slam";
        if (targetEnemy != null)
        {
            stopDistanceForAttack = PlayFabDataStore.catalogRunes[runeId].attackRange;
            if (Vector3.Distance(transform.position, targetEnemy.transform.position) <= stopDistanceForAttack)
            {
                if (attackTimer >= PlayFabDataStore.catalogRunes[runeId].cooldown)
                {     
                    targetEnemy.GetComponent<Health>().TakeDamage(gameObject, 15);
                    attackTimer = 0f;
                    playerAnimation.SetTrigger("ATTACK 1");
                    if (GetPlayerResource() + PlayFabDataStore.catalogRunes[runeId].resourceGeneration <= PlayFabDataStore.playerMaxResource)
                    {
                        SetPlayerResource(PlayFabDataStore.catalogRunes[runeId].resourceGeneration);
                    }
                    else
                    {
                        SetPlayerResource(100);
                    }

                }
            }
        }
    }

    public void Rune_Carve()
    {
        string runeId = "Rune_Carve";
        if (targetEnemy != null)
        {
            stopDistanceForAttack = PlayFabDataStore.catalogRunes[runeId].attackRange;
            if (Vector3.Distance(transform.position, targetEnemy.transform.position) <= stopDistanceForAttack)
            {
                if (attackTimer >= PlayFabDataStore.catalogRunes[runeId].cooldown)
                {
                    Collider[] hitEnemies = Physics.OverlapSphere(gameObject.transform.position, PlayFabDataStore.catalogRunes[runeId].attackRadius);
                    for (int i = 0; i < hitEnemies.Length; i++)
                    {
                        if (hitEnemies[i].CompareTag("Enemy"))
                        {
                            hitEnemies[i].GetComponent<Health>().TakeDamage(gameObject, 100);
                        }
                    }
                    attackTimer = 0f;
                    playerAnimation.SetTrigger("ATTACK 3");
                    if (GetPlayerResource() + PlayFabDataStore.catalogRunes[runeId].resourceGeneration <= PlayFabDataStore.playerMaxResource)
                    {
                        SetPlayerResource(PlayFabDataStore.catalogRunes[runeId].resourceGeneration);
                    }
                    else
                    {
                        SetPlayerResource(100);
                    }

                }
            }
        }
    }





    /* for Secodary abilities
    public void Rune_Carve()
    {
        string runeId = "Rune_Carve";
        if (GetPlayerResource() >= int.Parse(PlayFabDataStore.catalogRunes[runeId].resourceUsage))
        {
            controller.Stop();
            controller.ResetPath();
            stopDistanceForAttack = 2f;
            Collider[] hitEnemies = Physics.OverlapSphere(gameObject.transform.position, rune2_AttackRadius);
            for (int i = 0; i < hitEnemies.Length; i++)
            {
                if (hitEnemies[i].CompareTag("Enemy"))
                {
                    hitEnemies[i].GetComponent<Health>().TakeDamage(gameObject, 100);
                }
            }
            playerAnimation.SetTrigger("ATTACK 2");

            SetPlayerResource(-rune2_ResourceUsage);
        }

    }
    */
    public void Rune_BloodyTouch()
    {

    }

}


